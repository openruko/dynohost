#!/bin/bash

set -e
set -o pipefail

dyno_id=$1
socket_dir=$2
old_socket_dir=$3 #legacy - ignore
run_command="/root/ps-run/nodeboot"

touch "run_${dyno_id}.txt"

lxc_dir=/var/lib/lxc
dyno_dir=$lxc_dir/$dyno_id

if [ -d $dyno_dir ]; then
  rm -fr "$dyno_dir"
fi

echo "Creating $dyno_dir"
mkdir -p $dyno_dir/rootfs

(
cd $dyno_dir/rootfs
mkdir -p root/ps-run root/sockets proc sys usr etc/ssl etc/alternatives sbin bin lib lib64 

cat <<EOF > etc/resolv.conf
# Use host resolv.conf
`cat /etc/resolv.conf`

# Also use google DNS
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

cat <<EOF > etc/nsswitch.conf
hosts: files dns
EOF

cat <<EOF > etc/hostname
$dyno_id
EOF

cat <<EOF > etc/hosts
127.0.0.1       localhost mymachine.me
127.0.0.1       $dyno_id
EOF
)

mounts=(${@:4})

s3_repo_url=$4
s3_repo_code=$(curl -L -s -o /dev/null -w "%{http_code}" "${s3_repo_url#*:}")

if [ "$(basename $0)" = 'build-provision' ];  then
  # TODO if 403 Not Authorized print a warning
  if [ "$s3_repo_code" = "404" ]; then
    mounts=("/app:file://emptyrepo.tgz" ${@:5})
  fi
fi

echo "Setting up mounts"

for mount in "${mounts[@]}"; do

  mount_point=${mount%%:*};
  mount_url=${mount#*:};

  # create the mount point within the container
  mkdir -p $dyno_dir/rootfs/$mount_point

  echo "Fetching $mount_url"
  # support protocols file/// and http://
  # extract the gzipped tar, dont bother with squashfs
  #if s3url starts with http
  if [[ "$mount_url" == http* ]]; then
    curl -L $mount_url | tar -z -x -C "$dyno_dir/rootfs/$mount_point"
  fi

  if [[ "$mount_url" == file* ]]; then
    echo "assets/${mount_url#*//}"
    cat assets/${mount_url#*//} | tar -z -x -C "$dyno_dir/rootfs/$mount_point"
  fi
  #else
  #GIT_CHECKOUTDIR=$mountdir git clone $s3url
  
  # reset perms to devil uid/guid to avoid setuid/setgid attacks
  chown -R 1666.666 "$dyno_dir/rootfs/$mount_point"

  chmod -R u-s "$dyno_dir/rootfs/$mount_point"
  chmod -R g-s "$dyno_dir/rootfs/$mount_point"

done

echo "Setting up devices"

dyno_temp_dir="$dyno_dir/rootfs/tmp"
mkdir -p "$dyno_temp_dir"
chmod 1777 "$dyno_temp_dir"

DEV="$dyno_dir/rootfs/dev"
mkdir -p ${DEV}
mknod -m 666 ${DEV}/null c 1 3
mknod -m 666 ${DEV}/zero c 1 5
mknod -m 666 ${DEV}/random c 1 8
mknod -m 666 ${DEV}/urandom c 1 9
mkdir -m 755 ${DEV}/pts
mkdir -m 1777 ${DEV}/shm
mkdir -m 1777 ${DEV}/fd
mknod -m 666 ${DEV}/tty c 5 0
mknod -m 600 ${DEV}/console c 5 1
mknod -m 666 ${DEV}/tty0 c 4 0
mknod -m 666 ${DEV}/full c 1 7
# mknod -m 600 ${DEV}/initctl p 
mknod -m 666 ${DEV}/ptmx c 5 2

# TODO Add memory and CPU limits
cat <<CONFIG >$lxc_dir/$dyno_id/config
lxc.utsname = $dyno_id
lxc.pts = 1024
lxc.tty = 4
lxc.rootfs = $dyno_dir/rootfs
lxc.mount = $dyno_dir/fstab
CONFIG

cat <<PASSWD >$lxc_dir/$dyno_id/rootfs/etc/passwd
root:x:0:0:root:/root:/bin/bash
rukouser:x:1666:666:guest user:/app:/bin/bash
PASSWD

cat <<GROUP >$lxc_dir/$dyno_id/rootfs/etc/group
rukouser:x:666:rukouser
GROUP

fstemplate=default


cat <<FSCONFIG >$dyno_dir/fstab
none $dyno_dir/rootfs/dev/pts devpts defaults 0 0
none $dyno_dir/rootfs/proc proc nodev,noexec,nosuid 0 0
none $dyno_dir/rootfs/sys sysfs defaults 0 0
none $dyno_dir/rootfs/dev/shm tmpfs defaults 0 0
/usr $dyno_dir/rootfs/usr none bind 0 0
/sbin $dyno_dir/rootfs/sbin none bind 0 0
/bin $dyno_dir/rootfs/bin none bind 0 0
/lib $dyno_dir/rootfs/lib none bind 0 0
/lib64 $dyno_dir/rootfs/lib64 none bind 0 0
/etc/ssl $dyno_dir/rootfs/etc/ssl none bind 0 0
/etc/alternatives $dyno_dir/rootfs/etc/alternatives none bind 0 0
$RUKORUN_PATH $dyno_dir/rootfs/root/ps-run none bind 0 0
$socket_dir $dyno_dir/rootfs/root/sockets none bind 0 0
FSCONFIG

if [ "$(basename $0)" = 'build-provision' ];  then
  echo "$CODONHOOKS_PATH $dyno_dir/rootfs/app/hooks none bind 0 0" >> $dyno_dir/fstab
fi


echo "Starting dyno"
lxc-start -l DEBUG -o run_$dyno_id.txt -d -n $dyno_id $run_command
